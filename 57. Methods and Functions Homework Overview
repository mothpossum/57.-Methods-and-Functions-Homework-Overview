{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "ef582e40",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Enter a radius of a sphere : 4\n",
      "The volumn of sphere is  268.082573106329\n"
     ]
    }
   ],
   "source": [
    "import math \n",
    "def vol_sphere(r):\n",
    "\n",
    "    result = (4/3) * math.pi * r*r*r\n",
    "\n",
    "    return result\n",
    "\n",
    "radius = int(input(\"Enter a radius of a sphere : \"))\n",
    "\n",
    "volumn = vol_sphere(radius)\n",
    "\n",
    "print(\"The volumn of sphere is \", volumn)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "59166ba3",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The number is outside the given range.\n"
     ]
    }
   ],
   "source": [
    "def test_range(n):\n",
    "    if n in range(3,9):\n",
    "        print( \" %s is in the range\"%str(n))\n",
    "    else :\n",
    "        print(\"The number is outside the given range.\")\n",
    "test_range(10)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "5cca5490",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Original String :  Hi hey what uPPP\n",
      "# of Upper case characters :  4\n",
      "# of Lower case Characters :  9\n"
     ]
    }
   ],
   "source": [
    "def string_test(s):\n",
    "    d={\"UPPER_CASE\":0, \"LOWER_CASE\":0}\n",
    "    for c in s:\n",
    "        if c.isupper():\n",
    "           d[\"UPPER_CASE\"]+=1\n",
    "        elif c.islower():\n",
    "           d[\"LOWER_CASE\"]+=1\n",
    "        else:\n",
    "           pass\n",
    "    print (\"Original String : \", s)\n",
    "    print (\"# of Upper case characters : \", d[\"UPPER_CASE\"])\n",
    "    print (\"# of Lower case Characters : \", d[\"LOWER_CASE\"])\n",
    "\n",
    "string_test('Hi hey what uPPP')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "7a601df0",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[1, 2, 3, 4, 5]\n"
     ]
    }
   ],
   "source": [
    "def unique_list(l):\n",
    "  x = []\n",
    "  for a in l:\n",
    "    if a not in x:\n",
    "      x.append(a)\n",
    "  return x\n",
    "\n",
    "print(unique_list([1,2,3,3,3,3,4,5])) "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "7eb28be6",
   "metadata": {},
   "outputs": [],
   "source": [
    "def multiply(numbers):  \n",
    "    total = 1\n",
    "    for x in numbers:\n",
    "        total *= x  \n",
    "    return total  \n",
    "print(multiply((8, 2, 3, -1, 7)))"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.13"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
